import 'dotenv/config'
import { Pool } from 'pg'

export default class DB {
	constructor() {
		this.user = process.env.user
		this.host = process.env.host
		this.database = process.env.database
		this.password = process.env.password
		this.port = process.env.portDB

		this.pool = new Pool({
			user: this.user, // üîπ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			host: this.host, // üîπ –ò–ª–∏ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –ë–î
			database: this.database, // üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î
			password: this.password, // üîπ –ü–∞—Ä–æ–ª—å
			port: this.port, // üîπ –ü–æ—Ä—Ç PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432)
		})
	}

	async checkDB() {
		const query = `SELECT NOW();`
		try {
			await this.pool.query(query)
			console.log(`–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${err}`)
		}
	}

	async createTableTariffs() {
		const query = `CREATE TABLE IF NOT EXISTS tariffs (
		tariff_id SERIAL PRIMARY KEY,
		tariff_name VARCHAR(255) NOT NULL,
		tariff_price DECIMAL(10,2) NOT NULL,
		tariff_vendor_code VARCHAR(20)
	)`
		try {
			await this.pool.query(query)
			console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¢–∞—Ä–∏—Ñ—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¢–∞—Ä–∏—Ñ—ã: ${err}`)
		}
	}

	async getTariffs() {
		const query = `SELECT *
			FROM tariffs;`
		try {
			let queryRes = await this.pool.query(query)
			return queryRes.rows
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¢–∞—Ä–∏—Ñ—ã: ${err}`)
		}
	}

	async addTariff(id, name, price, vendorCode) {
		let query = `INSERT INTO tariffs(
			tariff_id, tariff_name, tariff_price, tariff_vendor_code)
			VALUES ($1, $2, $3, $4);`
		try {
			await this.pool.query(query, [id, name, price, vendorCode])
			console.log(`–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –¢–∞—Ä–∏—Ñ "${name}"`)
			await this.getTariffs()
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –¢–∞—Ä–∏—Ñ—ã: ${err}`)
		}
	}

	async truncateTariffs() {
		let query = `TRUNCATE TABLE tariffs`
		try {
			await this.pool.query(query)
			console.log('–¢–∞–±–ª–∏—Ü–∞ –¢–∞—Ä–∏—Ñ—ã –æ—á–∏—â–µ–Ω–∞')
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¢–∞—Ä–∏—Ñ—ã: ${err}`)
		}
	}

	async getData() {
		const query = `SELECT id, completed_at
	FROM issues;`
		try {
			let queryRes = await this.pool.query(query)
			console.log(queryRes.rows)
			return queryRes.rows
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞: ${err}`)
		}
	}
}
