import 'dotenv/config'
import { Pool } from 'pg'

export default class objectsTable {
	constructor() {
		this.user = process.env.user
		this.host = process.env.host
		this.database = process.env.database
		this.password = process.env.password
		this.port = process.env.portDB

		this.pool = new Pool({
			user: this.user, // üîπ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			host: this.host, // üîπ –ò–ª–∏ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –ë–î
			database: this.database, // üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î
			password: this.password, // üîπ –ü–∞—Ä–æ–ª—å
			port: this.port, // üîπ –ü–æ—Ä—Ç PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432)
		})
	}

	async createTableObjectsIfNotExist() {
		const query = `CREATE TABLE IF NOT EXISTS Objects (
    object_id SERIAL PRIMARY KEY,
    company_id INT NOT NULL,
    tariff_id INT,
    name VARCHAR(255),
    number_vehicle VARCHAR(50),
    owner_sim VARCHAR(255),
    number_sim VARCHAR(50),
    avtograf VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (company_id) REFERENCES Clients(company_id),
    FOREIGN KEY (tariff_id) REFERENCES Tariffs(tariff_id)
);`
		try {
			await this.pool.query(query)
			console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –û–±—ä–µ–∫—Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –û–±—ä–µ–∫—Ç—ã: ${err}`)
		}
	}

	async getObjects() {
		const query = `SELECT *
			FROM objects;`
		try {
			let queryRes = await this.pool.query(query)
			return queryRes.rows
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –û–±—ä–µ–∫—Ç–æ–≤: ${err}`)
		}
	}

	async addObject(
		id,
		companyId,
		tariffId,
		name,
		numberVehicle,
		ownerSim,
		numberSim,
		avtograf,
		is_active
	) {
		let query = `INSERT INTO objects(
			object_id, company_id, tariff_id, name, number_vehicle, owner_sim, number_sim, avtograf, is_active)
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);`
		try {
			await this.pool.query(query, [
				id,
				companyId,
				tariffId,
				name,
				numberVehicle,
				ownerSim,
				numberSim,
				avtograf,
				is_active,
			])
			console.log(`–í –ë–î —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –û–±—ä–µ–∫—Ç "${name}"`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –û–±—ä–µ–∫—Ç—ã: ${err}`)
		}
	}

	async findObjectById(id) {
		let query = `SELECT object_id, company_id, tariff_id, name, number_vehicle, owner_sim, number_sim, avtograf, is_active
			FROM objects
			WHERE object_id=$1;`
		try {
			let queryRes = await this.pool.query(query, [id])
			return queryRes.rows[0] || null
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –û–±—ä–µ–∫—Ç–∞ –ø–æ id: ${err}`)
		}
	}

	async findActiveObjectsByCompanyId(id) {
		let query = `SELECT object_id, company_id, tariff_id, name, number_vehicle, owner_sim, number_sim, avtograf, is_active
			FROM objects
			WHERE company_id=$1 and is_active=true;`
		try {
			let queryRes = await this.pool.query(query, [id])
			return queryRes.rows || null
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –û–±—ä–µ–∫—Ç–∞ –ø–æ id: ${err}`)
		}
	}

	async changeObject(
		id,
		companyId,
		tariffId,
		name,
		numberVechicle,
		ownerSim,
		numberSim,
		avtograf,
		isActive
	) {
		let query = `
			UPDATE Objects 
			SET company_id = $2,
				tariff_id = $3,
				name = $4,
				number_vehicle = $5,
				owner_sim = $6,
				number_sim = $7,
				avtograf = $8,
				is_active = $9
			WHERE object_id=$1;`
		try {
			await this.pool.query(query, [
				id,
				companyId,
				tariffId,
				name,
				numberVechicle,
				ownerSim,
				numberSim,
				avtograf,
				isActive,
			])
			console.log(`–û–±—ä–µ–∫—Ç —Å id "${id}" –∏–∑–º–µ–Ω–µ–Ω –≤ –ë–î`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –û–±—ä–µ–∫—Ç–∞ –ø–æ id: ${err}`)
		}
	}

	async deactivateObjects() {
		let query = `UPDATE Objects SET is_active = false`
		try {
			await this.pool.query(query)
			console.log('–û–±—ä–µ–∫—Ç—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ –ë–î')
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –û–±—ä–µ–∫—Ç–æ–≤ –≤ –ë–î: ${err}`)
		}
	}
}
