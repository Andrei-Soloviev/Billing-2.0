import 'dotenv/config'
import { Pool } from 'pg'

export default class billingTable {
	constructor() {
		this.user = process.env.user
		this.host = process.env.host
		this.database = process.env.database
		this.password = process.env.password
		this.port = process.env.portDB

		this.pool = new Pool({
			user: this.user, // üîπ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			host: this.host, // üîπ –ò–ª–∏ IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –ë–î
			database: this.database, // üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ë–î
			password: this.password, // üîπ –ü–∞—Ä–æ–ª—å
			port: this.port, // üîπ –ü–æ—Ä—Ç PostgreSQL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5432)
		})
	}

	async createTableBillingIfNotExist() {
		const query = `CREATE TABLE IF NOT EXISTS Billing (
    billing_id SERIAL PRIMARY KEY,
    version_id INT NOT NULL,
    object_id INT NOT NULL,
    issue_id INT,
    price_payment_time DECIMAL(10, 2),
    FOREIGN KEY (version_id) REFERENCES Versions(version_id),
    FOREIGN KEY (object_id) REFERENCES Objects(object_id)
);`
		try {
			await this.pool.query(query)
			console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ë–∏–ª–ª–∏–Ω–≥ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ë–∏–ª–ª–∏–Ω–≥: ${err}`)
		}
	}

	async addBilling(versionId, objectId, issueId, curPrice) {
		let query = `INSERT INTO billing(
			version_id, object_id, issue_id, price_payment_time)
			VALUES ($1, $2, $3, $4);`
		try {
			await this.pool.query(query, [versionId, objectId, issueId, curPrice])
			console.log(`–í –ë–î —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –°—á–µ—Ç "${issueId}"`)
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–∏–ª–ª–∏–Ω–≥: ${err}`)
		}
	}

	async findBillingByID(id) {
		let query = `SELECT billing_id, version_id, object_id, issue_id, price_payment_time 
			FROM billing
			WHERE billing_id=$1;`
		try {
			let queryRes = await this.pool.query(query, [id])
			return queryRes.rows[0] || null
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ë–∏–ª–ª–∏–Ω–≥–∞ –ø–æ id: ${err}`)
		}
	}

	async findBillingByVersionId(id) {
		let query = `SELECT billing_id, version_id, object_id, issue_id, price_payment_time 
			FROM billing
			WHERE version_id=$1;`
		try {
			let queryRes = await this.pool.query(query, [id])
			return queryRes.rows || null
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ë–∏–ª–ª–∏–Ω–≥–∞ –ø–æ version_id: ${err}`)
		}
	}

	async findBillingByObjectIdAndVersionId(object_id, version_id) {
		let query = `SELECT billing_id, version_id, object_id, issue_id, price_payment_time 
			FROM billing
			WHERE object_id=$1 and version_id=$2;`
		try {
			let queryRes = await this.pool.query(query, [object_id, version_id])
			return queryRes.rows || null
		} catch (err) {
			console.error(
				`–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ë–∏–ª–ª–∏–Ω–≥–∞ –ø–æ object_id –∏ version_id: ${err}`
			)
		}
	}

	async truncateBillings() {
		let query = `TRUNCATE TABLE billings`
		try {
			await this.pool.query(query)
			console.log('–¢–∞–±–ª–∏—Ü–∞ –ë–∏–ª–ª–∏–Ω–≥ –æ—á–∏—â–µ–Ω–∞')
		} catch (err) {
			console.error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ë–∏–ª–ª–∏–Ω–≥: ${err}`)
		}
	}
}
